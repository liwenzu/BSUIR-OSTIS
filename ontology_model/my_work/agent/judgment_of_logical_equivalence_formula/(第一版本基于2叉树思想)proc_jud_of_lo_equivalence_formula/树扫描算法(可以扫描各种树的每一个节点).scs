scp_program -> proc_jud_of_lo_equivalence_formula_na_neg1 (* 
   -> rrel_params: .proc_jud_of_lo_equivalence_formula_na_neg1_params (*  
		-> rrel_1: rrel_in: _elems_1cp;; //标准答案或用户答案的结构
            *);;
   -> rrel_operators: .proc_jud_of_lo_equivalence_formula_na_neg1_set (*
            -> rrel_init: .proc_jud_of_lo_equivalence_formula_na_neg1_operator0 (* 
                     <- printNl;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: [树结构全扫描测试程序];;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg1_operator0_1;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator0_1 (* 
                     <- genEl;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _classpoint;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//首先找到每个结构中的第一个链接节点
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator1 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _esaall;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg1_operator_return;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_1 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _esaall;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _firsttup;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_2;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg1_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_2 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_3;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_3 (* 
                     <- ifType;;
                     -> rrel_1: rrel_const: rrel_access: rrel_scp_var: _firsttup;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_4;;
                     *);;
//开始判断是第一连接节点
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_4 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _arc;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _firsttup;; 
                    => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_5;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//开始后续处理
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_5 (* 
                     <- varAssign;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _elemmed;;
                     -> rrel_2: rrel_fixed: rrel_scp_var: _firsttup;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_5a;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_5a (* 
                     <- varAssign;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _elemro;;
                     -> rrel_2: rrel_fixed: rrel_scp_const: rrel_1;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_6a;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_6a (* 
                     <- printEl;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmed;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_6;;
                     *);;
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_6 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmed;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _elstup;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_7;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_12;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_7 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elstup;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elemmed;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_8;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg1_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_8 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_9a;;
                     *);;
//判断elstup还有弧吗
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_9a (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elstup;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _arc;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_9;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_6a;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_9 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _classpoint;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elstup;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elemro;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_10;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_10 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemro;;
                     -> rrel_2: rrel_assign: rrel_const: rrel_common: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _currelem;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: nrel_basic_sequence;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_11;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg1_operator_return;;//@@@@说明编号不够用
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_11 (* 
                     <- varAssign;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _elemro;;
                     -> rrel_2: rrel_fixed: rrel_scp_var: _currelem;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_6a;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//先把编号减一
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_12 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _currlast;;
                     -> rrel_2: rrel_assign: rrel_const: rrel_common: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemro;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: nrel_basic_sequence;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_13;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg1_operator_return;;//@@@@说明编号不够用
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_13 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _classpoint;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemmedcp;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _currlast;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_14;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg1_operator116;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_14 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmedcp;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemmed;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_15a;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg1_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_15a (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_15a1;;
                     *);;
//判断当前节点还有弧吗
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_15a1 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmedcp;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_6a;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_15;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_15 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elemmedcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_16;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_16 (* 
                     <- varAssign;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _elemro;;
                     -> rrel_2: rrel_fixed: rrel_scp_var: _currlast;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg1_operator1_6a;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator116 (* 
                     <- printNl;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: [程序调试断点！！！！！！！！！！！！！];;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg1_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg1_operator_return (* 
                     <- return;;
                     *);;                                                 
      *);;  
*);;
