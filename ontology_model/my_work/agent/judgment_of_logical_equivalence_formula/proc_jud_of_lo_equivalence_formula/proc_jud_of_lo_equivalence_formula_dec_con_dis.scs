scp_program -> proc_jud_of_lo_equivalence_formula_dec_con_dis (* 
   -> rrel_params: .proc_jud_of_lo_equivalence_formula_dec_con_dis_params (*  
		-> rrel_1: rrel_in: _elems_1cp;;
		-> rrel_2: rrel_in: _firsttup;;
		-> rrel_3: rrel_in: _classequi;;
            *);;
   -> rrel_operators: .proc_jud_of_lo_equivalence_formula_dec_con_dis_set (*
            -> rrel_init: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator0 (* 
                     <- printNl;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: [分解当前结构中没有换名的特殊合取量词和特殊析取量词的函数];;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator0_1;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator0_1 (* 
                     <- genEl;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _classgeex;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator0_2;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator0_2 (* 
                     <- genEl;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _classpoint;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//首先找到当前结构中包含的所有子结构
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elems_1cp;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_struct: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _esaall;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_1 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _esaall;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_struct: rrel_scp_var: _elem;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_2;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_6;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_2 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_3;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_3 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _arc;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elem;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: rrel_bind_variables;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_4;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_1;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_4 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _firsttup;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elem;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: rrel_bind_variables;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_5;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_5 (* 
                     <- genElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _classgeex;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elem;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_1;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//判断量词数量，如果只有一个则继续执行，如果多余一个则退出
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_6 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _classgeex;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_7;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_7 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_8;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_8 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _classgeex;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_9;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//判断当前结构中的变量个数，如果为一则继续，否则退出。
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_9 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemcp;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_var: rrel_node: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _esaall;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_10;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_10 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _esaall;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elem;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_11;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_11 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_12;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_12 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _esaall;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_13;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//找出这个结构的节点
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_13 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elem;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemcp;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: rrel_bind_variables;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_14;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_14 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _classequi;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _els1;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_15;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_15 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _els1;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elem;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_16;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//判断当前节点的类型
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_16 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: nrel_generality;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elem;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_18;;//@@@@@@@
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_17;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_17 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: nrel_existence;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elem;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_20;;//@@@@@@@
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//判断各个节点的一个节点的情况
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_18 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elemnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_19;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_19 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: nrel_conjunction;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator2;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_20 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elemnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_21;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator1_21 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: nrel_disjunction;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator2;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//首先找出一个不需要扫描的链接点和扫描的结构
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator2 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemnext;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elemtudel;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator2_2;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator2_1;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator2_1 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemnext;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_struct: rrel_scp_var: _elemstdel;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator2_2;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//先找出需要替换的变量
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator2_2 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemcp;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_var: rrel_node: rrel_scp_var: _nechaele;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator2_2a;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return;;
                     *);;
//先给量词结构中随机生成一个节点
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator2_2a (* 
                     <- genElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemcp;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_var: rrel_node: rrel_scp_var: _newcre;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator2_3;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator2_3 (* 
                     <- varAssign;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _elemmed;;
                     -> rrel_2: rrel_fixed: rrel_scp_var: _elemnext;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator2_4;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator2_4 (* 
                     <- varAssign;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _elemro;;
                     -> rrel_2: rrel_fixed: rrel_scp_const: rrel_1;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3a;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//开始树型结构扫描
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3a (* 
                     <- printEl;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmed;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3;;
                     *);;
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmed;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _elstup;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//首先判断其中一个分支的节点有值吗
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4 (* 
                     <- ifVarAssign;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemtudel;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_1 (* 
                     <- ifCoin;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmed;; 
                     -> rrel_2: rrel_fixed: rrel_scp_var: _elemtudel;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_7;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_2;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//开始进行换名
//首先判断是和量词连接的结构吗
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_2 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmed;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_struct: rrel_scp_var: _arc;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: rrel_bind_variables;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_3;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_3 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmed;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_struct: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _esaall;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_4;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_1;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_4 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _esaall;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_struct: rrel_scp_var: _elem;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_5;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_1;;//@@@@@@@@
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_5 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_6;;
                     *);;
//判断需要替换的元素在结构中吗
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_6 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arcp;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _nechaele;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_7;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_4;;
                     *);;
//先将需要替换的变量加入到结构中
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_7 (* 
                     <- genElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _newcre;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_8;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//进行结构中需要换名的变量替换
//首先找出结构中的变量通用弧
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_8 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_var: rrel_common: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _esaallcom;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_9;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5;;//@@@@@@@@@@@
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//首先找出结构中的通用弧
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_9 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _esaallcom;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_var: rrel_common: rrel_scp_var: _elemcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_10;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5;;//@@@@@@@@@@@
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_10 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_11;;
                     *);;
//判断弧的两端有需要替换的变量吗
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_11 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _els1;;  
                     -> rrel_2: rrel_fixed: rrel_scp_var: _elemcp;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _els2;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_12;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_9;;
                     *);;
//同时找出这个弧的关系
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_12 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_assign: rrel_norole_relation: rrel_scp_var: _els3;;  
                     -> rrel_2: rrel_assign: rrel_var: rrel_access: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_13;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_9;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_13 (* 
                     <- ifCoin;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _nechaele;; 
                     -> rrel_2: rrel_fixed: rrel_scp_var: _els1;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_15;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_14;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_14 (* 
                     <- ifCoin;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _nechaele;; 
                     -> rrel_2: rrel_fixed: rrel_scp_var: _els2;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_16;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_9;;
                     *);;
//重新生成一个弧
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_15 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _newcre;;
                     -> rrel_2: rrel_assign: rrel_var: rrel_common: rrel_scp_var: _arc1;;//rrel_const: rrel_common,因为不显示为了方便观察
                     -> rrel_3: rrel_fixed: rrel_scp_var: _els2;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elem;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_17;;
                     *);;
//重新生成一个弧
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_16 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _els1;;
                     -> rrel_2: rrel_assign: rrel_var: rrel_common: rrel_scp_var: _arc1;;//rrel_const: rrel_common,因为不显示为了方便观察
                     -> rrel_3: rrel_fixed: rrel_scp_var: _newcre;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elem;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_17;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_17 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _els3;;
                     -> rrel_2: rrel_assign: rrel_var: rrel_access: rrel_scp_var: _arc;;//rrel_var: rrel_access,因为不显示为了方便观察
                     -> rrel_3: rrel_fixed: rrel_scp_var: _arc1;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elem;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_18;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_18 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elemcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_9;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//首先超出结构中的归属弧
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_access: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _esaallarc;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_10;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_1 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _esaallarc;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_var: rrel_access: rrel_scp_var: _elemcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_2;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_10;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_2 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_3;;
                     *);;
//判断这个弧是关系吗
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_3 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_assign: rrel_norole_relation: rrel_scp_var: _arc;;  
                     -> rrel_2: rrel_fixed: rrel_scp_var: _elemcp;;
                     -> rrel_3: rrel_assign: rrel_var: rrel_common: rrel_scp_var: _arc;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_4;;
                     *);;
//判断弧的两端有需要替换的变量吗
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_4 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _els1;;  
                     -> rrel_2: rrel_fixed: rrel_scp_var: _elemcp;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _els2;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_5;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_1;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_5 (* 
                     <- ifCoin;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _nechaele;; 
                     -> rrel_2: rrel_fixed: rrel_scp_var: _els1;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_7;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_6;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_6 (* 
                     <- ifCoin;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _nechaele;; 
                     -> rrel_2: rrel_fixed: rrel_scp_var: _els2;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_8;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_1;;
                     *);;
//重新生成一个弧
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_7 (* 
                      <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _newcre;;
                     -> rrel_2: rrel_assign: rrel_var: rrel_access: rrel_scp_var: _arc;;//rrel_var: rrel_access,因为不显示为了方便观察
                     -> rrel_3: rrel_fixed: rrel_scp_var: _els2;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elem;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_9;;
                     *);;
//重新生成一个弧
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_8 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _els1;;
                     -> rrel_2: rrel_assign: rrel_var: rrel_access: rrel_scp_var: _arc;;//rrel_var: rrel_access,因为不显示为了方便观察
                     -> rrel_3: rrel_fixed: rrel_scp_var: _newcre;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elem;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_9;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_9 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elemcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_1;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//删除结构中这个替换的元素
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator5_10 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator4_4;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_1 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elstup;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elemmed;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_2;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_2 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_3;;
                     *);;
//判断elstup还有弧吗
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_3 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elstup;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _arc;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_4;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3a;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_4 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _classpoint;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elstup;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elemro;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_5;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_5 (* 
                      <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemro;;
                     -> rrel_2: rrel_assign: rrel_const: rrel_common: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _currelem;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: nrel_basic_sequence;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_6;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_6 (* 
                     <- varAssign;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _elemro;;
                     -> rrel_2: rrel_fixed: rrel_scp_var: _currelem;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3a;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//开始进行换名
//首先找出所有结构
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6 (* 
                   <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmed;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_struct: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _esaall;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_7;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_1 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmed;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_struct: rrel_scp_var: _elem;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: rrel_bind_variables;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_2;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_4a;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_2 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _esaall;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elem;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_3;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_3;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_3 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_4a;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//首先判断其中一个分支的节点有值吗
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_4a (* 
                     <- ifVarAssign;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemstdel;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_4a1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_4;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_4a1 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _esaall;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemstdel;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_4a2;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_4;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_4a2 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_4;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_4 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _esaall;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_struct: rrel_scp_var: _elem;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_5;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_7;;//@@@@@@@@
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_5 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_6;;
                     *);;
//判断需要替换的元素在结构中吗
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_6 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arcp;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _nechaele;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_7;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_4;;
                     *);;
//先将需要替换的变量加入到结构中
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_7 (* 
                     <- genElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _newcre;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_8;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//进行结构中需要换名的变量替换
//首先找出结构中的变量通用弧

           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_8 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_var: rrel_common: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _esaallcom;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_9;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7;;//@@@@@@@@@@@
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//首先找出结构中的通用弧
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_9 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _esaallcom;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_var: rrel_common: rrel_scp_var: _elemcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_10;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7;;//@@@@@@@@@@@
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_10 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_11;;
                     *);;
//判断弧的两端有需要替换的变量吗
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_11 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _els1;;  
                     -> rrel_2: rrel_fixed: rrel_scp_var: _elemcp;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _els2;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_12;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_9;;
                     *);;
//同时找出这个弧的关系
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_12 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_assign: rrel_norole_relation: rrel_scp_var: _els3;;  
                     -> rrel_2: rrel_assign: rrel_var: rrel_access: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_13;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_9;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_13 (* 
                     <- ifCoin;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _nechaele;; 
                     -> rrel_2: rrel_fixed: rrel_scp_var: _els1;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_15;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_14;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_14 (* 
                     <- ifCoin;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _nechaele;; 
                     -> rrel_2: rrel_fixed: rrel_scp_var: _els2;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_16;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_9;;
                     *);;
//重新生成一个弧
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_15 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _newcre;;
                     -> rrel_2: rrel_assign: rrel_var: rrel_common: rrel_scp_var: _arc1;;//rrel_const: rrel_common,因为不显示为了方便观察
                     -> rrel_3: rrel_fixed: rrel_scp_var: _els2;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elem;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_17;;
                     *);;
//重新生成一个弧
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_16 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _els1;;
                     -> rrel_2: rrel_assign: rrel_var: rrel_common: rrel_scp_var: _arc1;;//rrel_const: rrel_common,因为不显示为了方便观察
                     -> rrel_3: rrel_fixed: rrel_scp_var: _newcre;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elem;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_17;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_17 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _els3;;
                     -> rrel_2: rrel_assign: rrel_var: rrel_access: rrel_scp_var: _arc;;//rrel_var: rrel_access,因为不显示为了方便观察
                     -> rrel_3: rrel_fixed: rrel_scp_var: _arc1;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elem;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_18;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_18 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elemcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_9;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//首先超出结构中的归属弧
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_access: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _esaallarc;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_10;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_1 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _esaallarc;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_var: rrel_access: rrel_scp_var: _elemcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_2;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_10;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_2 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_3;;
                     *);;
//判断这个弧是关系吗
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_3 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_assign: rrel_norole_relation: rrel_scp_var: _arc;;  
                     -> rrel_2: rrel_fixed: rrel_scp_var: _elemcp;;
                     -> rrel_3: rrel_assign: rrel_var: rrel_common: rrel_scp_var: _arc;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_4;;
                     *);;
//判断弧的两端有需要替换的变量吗
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_4 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _els1;;  
                     -> rrel_2: rrel_fixed: rrel_scp_var: _elemcp;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _els2;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_5;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_1;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_5 (* 
                     <- ifCoin;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _nechaele;; 
                     -> rrel_2: rrel_fixed: rrel_scp_var: _els1;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_7;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_6;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_6 (* 
                     <- ifCoin;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _nechaele;; 
                     -> rrel_2: rrel_fixed: rrel_scp_var: _els2;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_8;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_1;;
                     *);;
//重新生成一个弧
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_7 (* 
                      <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _newcre;;
                     -> rrel_2: rrel_assign: rrel_var: rrel_access: rrel_scp_var: _arc;;//rrel_var: rrel_access,因为不显示为了方便观察
                     -> rrel_3: rrel_fixed: rrel_scp_var: _els2;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elem;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_9;;
                     *);;
//重新生成一个弧
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_8 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _els1;;
                     -> rrel_2: rrel_assign: rrel_var: rrel_access: rrel_scp_var: _arc;;//rrel_var: rrel_access,因为不显示为了方便观察
                     -> rrel_3: rrel_fixed: rrel_scp_var: _newcre;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elem;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_9;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_9 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elemcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_1;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//删除结构中这个替换的元素
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator7_10 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator6_4;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//先把编号减一
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_7 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _currlast;;
                     -> rrel_2: rrel_assign: rrel_const: rrel_common: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemro;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: nrel_basic_sequence;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_8;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_8 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _classpoint;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemmedcp;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _currlast;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_9;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return;;//@@@@@@@@
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_9 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmedcp;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemmed;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_10;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_10 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elemmedcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_11;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3_11 (* 
                     <- varAssign;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _elemro;;
                     -> rrel_2: rrel_fixed: rrel_scp_var: _currlast;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator3a;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _classgeex;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return1;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return1 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _classpoint;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return2;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_dec_con_dis_operator_return2 (* 
                     <- return;;
                     *);;                                                 
      *);;  
*);;
