scp_program -> proc_jud_of_lo_equivalence_formula_qua_for (* 
   -> rrel_params: .proc_jud_of_lo_equivalence_formula_qua_for_params (*  
		-> rrel_1: rrel_in: _elems_1cp;;
		-> rrel_2: rrel_in: _esaallgeex;;
		-> rrel_3: rrel_in: _firsttup;;
		-> rrel_4: rrel_in: _classequi;;         
            *);;
   -> rrel_operators: .proc_jud_of_lo_equivalence_formula_qua_for_set (*
            -> rrel_init: .proc_jud_of_lo_equivalence_formula_qua_for_operator0 (* 
                     <- printNl;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: [谓词逻辑公式中量词前移的函数];;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator0_1;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator0_1 (* 
                     <- genEl;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _elemtuge;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator0_2;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator0_2 (* 
                     <- genEl;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _elemtuex;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator1;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//找出当前公式中等价关系的链接节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1 (* 
                     <- varAssign;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _elemmed;;
                     -> rrel_2: rrel_fixed: rrel_scp_var: _firsttup;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_1;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_1 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmed;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_not_binary_tuple: rrel_scp_var: _elemnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_2;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
//判断这个弧和等价之间有关系吗
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_2 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: nrel_equivalence;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_4a;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_3;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_3 (* 
                     <- varAssign;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _elemmed;;
                     -> rrel_2: rrel_fixed: rrel_scp_var: _elemnext;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_1;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_4a (* 
                     <- genElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _classequi;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemnext;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_4;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//首先判断该节点的下一个节点存在量词吗
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_4 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemnext;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arcp;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elemnextcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_5;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//找出量词结构的所有关联节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_5 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _esaallgeex;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _esaallgeexcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_6;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_6 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _esaallgeexcp;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elem;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_7;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_13;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_7 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_8;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_8 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elemcp;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elem;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_9;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_6;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_9 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: nrel_generality;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_10;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_11;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_10 (* 
                     <- genElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemtuge;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_6;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_11(* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: nrel_existence;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_12;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_6;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_12 (* 
                     <- genElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemtuex;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_6;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//判断等价结构下一个节点为哪种类型的节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_13(* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: nrel_generality;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemnextcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_15a;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_14;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_14(* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: nrel_existence;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemnextcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_15b;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator4;;
                     *);;
//需要将记录在存储在存在量词或任意量词中的对应弧删除
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_15a (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemtuge;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemnextcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_15a1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_15a1 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_15;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_15b (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemtuex;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemnextcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_15a1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//判断前束量词中的最后一个量词是哪种量词
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_15 (* 
                     <- varAssign;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _elemmed;;
                     -> rrel_2: rrel_fixed: rrel_scp_var: _elemnextcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_16;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_16(* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmed;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elemnextcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_17;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_17 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: nrel_generality;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemnextcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_19a;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_18;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_18(* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: nrel_existence;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemnextcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_19b;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_20;;
                     *);;
//需要将记录在存储在存在量词或任意量词中的对应弧删除
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_19a (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemtuge;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemnextcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_19a1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_19a1 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_19;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_19b (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemtuex;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemnextcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_19a1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_19 (* 
                     <- varAssign;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _elemmed;;
                     -> rrel_2: rrel_fixed: rrel_scp_var: _elemnextcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_16;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_20 (* 
                     <- varAssign;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _elemnext;;
                     -> rrel_2: rrel_fixed: rrel_scp_var: _elemmed;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_21a;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_21a (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemnext;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arcs;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemnextcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_21;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
//判断当前节点为哪种类型的节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_21 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: nrel_generality;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator1_22;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator1_22 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: nrel_existence;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//首先前移全部的任意量词
        -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemnext;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemcp;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: rrel_bind_variables;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_3;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//开始循环前移剩余的任意量词
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_3 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemtuge;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_4;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2a;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_4 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_5;;
                     *);;
//先将这个存在结构中的变量赋值给已经前移的结构中
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_5 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemsubcp;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: rrel_bind_variables;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_6;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_3;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_6 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsubcp;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_var: rrel_node: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_fixed: rrel_scp_var: _elemcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_7;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_3;;
                     *);;
//找出当前节点的上一个节点和下一个节点
           -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_7 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _els1;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_8;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_3;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_8 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _els1;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemsubcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_9;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_3;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_9 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_10;;
                     *);;
//找出下一个节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_10 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _els1;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elsnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_11;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_3;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_11 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_12;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_3;;
                     *);;
//找出上一个节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_12 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elslast;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_13;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_3;;
                     *);;
//删除当前结构的节点，和对应的变量结构
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_13 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elemsub;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_14;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_14 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elemsubcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_15m;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//重复节点检测并消除
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_15m (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_assign: rrel_const: rrel_norole_relation: rrel_scp_var: _els2a1;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elslast;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_15m1;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_15;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_15m1 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_assign: rrel_const: rrel_norole_relation: rrel_scp_var: _els2a2;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_15m2;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_15;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_15m2 (* 
                  <- ifCoin;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _els2a1;;
                  -> rrel_2: rrel_fixed: rrel_scp_var: _els2a2;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_15m3;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_15;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_15m3 (* 
                  <- searchSetStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _elsnext;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                  -> rrel_set_3: rrel_assign: rrel_scp_var: _esaallsub;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_15m4;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_15m4 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _esaallsub;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_scp_var: _elem2a;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_15m5;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_15m7;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_15m5 (* 
                  <- eraseEl;;
                  -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_15m6;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_15m6 (* 
                  <- genElStr5;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _elslast;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elem2a;;
                  -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_15m4;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_15m7 (* 
                  <- eraseEl;;
                  -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elsnext;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_3;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_15 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elslast;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_3;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//开始进行量词前移操作
//先随机找出一个存在量词
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2a (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemtuex;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elem;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a1 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a2;;
                     *);;
//找出当前节点的上一节点和下一节点,并删除对应的弧
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a2 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _elemsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a3;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a3 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemcp;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: rrel_bind_variables;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a4;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a4 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a5;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a5 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a6;;
                     *);;
//找出下一个节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a6 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elsnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a7;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a7 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a8;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a8 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a9;;
                     *);;
//找出上一个节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a9 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elslast;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elem;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a10;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a10 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a11;;
                     *);;
//首先删除等价节点和他的下一个节点之间的弧
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a11 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arcs;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a12;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//开始将当前存在量词前移
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a12 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemnext;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elem;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a13;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a13 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemnextcp;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a14m;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//重复节点检测并消除
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a14m (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_assign: rrel_const: rrel_norole_relation: rrel_scp_var: _els2a1;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elslast;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a14m1;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a14;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a14m1 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_assign: rrel_const: rrel_norole_relation: rrel_scp_var: _els2a2;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a14m2;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a14;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a14m2 (* 
                  <- ifCoin;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _els2a1;;
                  -> rrel_2: rrel_fixed: rrel_scp_var: _els2a2;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a14m3;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a14;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a14m3 (* 
                  <- searchSetStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _elsnext;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                  -> rrel_set_3: rrel_assign: rrel_scp_var: _esaallsub;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a14m4;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a14m4 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _esaallsub;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_scp_var: _elem2a;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a14m5;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a14m7;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a14m5 (* 
                  <- eraseEl;;
                  -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a14m6;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a14m6 (* 
                  <- genElStr5;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _elslast;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elem2a;;
                  -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a14m4;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a14m7 (* 
                  <- eraseEl;;
                  -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elsnext;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a15;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a14 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elslast;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a15;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//开始循环前移剩余的存在量词
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a15 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemtuex;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a16;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a16 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a17;;
                     *);;
//先将这个存在结构中的变量赋值给已经前移的结构中
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a17 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemsubcp;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: rrel_bind_variables;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a18;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a15;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a18 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsubcp;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_var: rrel_node: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_fixed: rrel_scp_var: _elemcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a19;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a15;;
                     *);;
//找出当前节点的上一个节点和下一个节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a19 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _els1;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a20;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a15;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a20 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _els1;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemsubcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a21;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a15;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a21 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a22;;
                     *);;
//找出下一个节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a22 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _els1;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elsnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a23;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a15;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a23 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a24;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a15;;
                     *);;
//找出上一个节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a24 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elslast;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a25;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a15;;
                     *);;
//删除当前结构的节点，和对应的变量结构
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a25 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elemsub;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a26;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a26 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elemsubcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a27m;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//重复节点检测并消除
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a27m (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_assign: rrel_const: rrel_norole_relation: rrel_scp_var: _els2a1;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elslast;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a27m1;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a27;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a27m1 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_assign: rrel_const: rrel_norole_relation: rrel_scp_var: _els2a2;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a27m2;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a27;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a27m2 (* 
                  <- ifCoin;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _els2a1;;
                  -> rrel_2: rrel_fixed: rrel_scp_var: _els2a2;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a27m3;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a27;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a27m3 (* 
                  <- searchSetStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _elsnext;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                  -> rrel_set_3: rrel_assign: rrel_scp_var: _esaallsub;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a27m4;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a27m4 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _esaallsub;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_scp_var: _elem2a;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a27m5;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a27m7;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a27m5 (* 
                  <- eraseEl;;
                  -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a27m6;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a27m6 (* 
                  <- genElStr5;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _elslast;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elem2a;;
                  -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a27m4;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a27m7 (* 
                  <- eraseEl;;
                  -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elsnext;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a15;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a27 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elslast;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator2_a15;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//首先前移全部的存在量词
        -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemnext;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemcp;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: rrel_bind_variables;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//开始循环前移剩余的存在量词
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_1 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemtuex;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_2;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3a;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_2 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_3;;
                     *);;
//先将这个存在结构中的变量赋值给已经前移的结构中
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_3 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemsubcp;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: rrel_bind_variables;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_4;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_1;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_4 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsubcp;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_var: rrel_node: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_fixed: rrel_scp_var: _elemcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_5;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_1;;
                     *);;
//找出当前节点的上一个节点和下一个节点
           -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_5 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _els1;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_6;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_1;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_6 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _els1;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemsubcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_7;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_1;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_7 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_8;;
                     *);;
//找出下一个节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_8 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _els1;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elsnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_9;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_1;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_9 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_10;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_1;;
                     *);;
//找出上一个节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_10 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elslast;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_11;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_1;;
                     *);;
//删除当前结构的节点，和对应的变量结构
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_11 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elemsub;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_12;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_12 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elemsubcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_13m;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//重复节点检测并消除
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_13m (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_assign: rrel_const: rrel_norole_relation: rrel_scp_var: _els2a1;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elslast;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_13m1;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_13;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_13m1 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_assign: rrel_const: rrel_norole_relation: rrel_scp_var: _els2a2;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_13m2;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_13;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_13m2 (* 
                  <- ifCoin;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _els2a1;;
                  -> rrel_2: rrel_fixed: rrel_scp_var: _els2a2;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_13m3;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_13;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_13m3 (* 
                  <- searchSetStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _elsnext;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                  -> rrel_set_3: rrel_assign: rrel_scp_var: _esaallsub;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_13m4;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_13m4 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _esaallsub;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_scp_var: _elem2a;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_13m5;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_13m7;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_13m5 (* 
                  <- eraseEl;;
                  -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_13m6;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_13m6 (* 
                  <- genElStr5;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _elslast;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elem2a;;
                  -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_13m4;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_13m7 (* 
                  <- eraseEl;;
                  -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elsnext;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_1;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_13 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elslast;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_1;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//开始进行量词前移操作
//先随机找出一个任意量词
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3a (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemtuge;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elem;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a1 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a2;;
                     *);;
//找出当前节点的上一节点和下一节点,并删除对应的弧
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a2 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _elemsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a3;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a3 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemcp;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: rrel_bind_variables;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a4;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a4 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a5;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a5 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a6;;
                     *);;
//找出下一个节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a6 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elsnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a7;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a7 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a8;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a8 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a9;;
                     *);;
//找出上一个节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a9 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elslast;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elem;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a10;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a10 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a11;;
                     *);;
//首先删除等价节点和他的下一个节点之间的弧
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a11 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arcs;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a12;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//开始将当前存在量词前移
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a12 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemnext;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elem;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a13;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a13 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemnextcp;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a14m;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//重复节点检测并消除
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a14m (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_assign: rrel_const: rrel_norole_relation: rrel_scp_var: _els2a1;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elslast;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a14m1;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a14;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a14m1 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_assign: rrel_const: rrel_norole_relation: rrel_scp_var: _els2a2;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a14m2;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a14;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a14m2 (* 
                  <- ifCoin;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _els2a1;;
                  -> rrel_2: rrel_fixed: rrel_scp_var: _els2a2;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a14m3;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a14;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a14m3 (* 
                  <- searchSetStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _elsnext;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                  -> rrel_set_3: rrel_assign: rrel_scp_var: _esaallsub;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a14m4;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a14m4 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _esaallsub;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_scp_var: _elem2a;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a14m5;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a14m7;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a14m5 (* 
                  <- eraseEl;;
                  -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a14m6;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a14m6 (* 
                  <- genElStr5;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _elslast;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elem2a;;
                  -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a14m4;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a14m7 (* 
                  <- eraseEl;;
                  -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elsnext;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a15;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a14 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elslast;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a15;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//开始循环前移剩余的存在量词
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a15 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemtuge;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a16;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a16 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a17;;
                     *);;
//先将这个存在结构中的变量赋值给已经前移的结构中
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a17 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemsubcp;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: rrel_bind_variables;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a18;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a15;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a18 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsubcp;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_var: rrel_node: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_fixed: rrel_scp_var: _elemcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a19;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a15;;
                     *);;
//找出当前节点的上一个节点和下一个节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a19 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _els1;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a20;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a15;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a20 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _els1;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemsubcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a21;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a15;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a21 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a22;;
                     *);;
//找出下一个节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a22 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _els1;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elsnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a23;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a15;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a23 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a24;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a15;;
                     *);;
//找出上一个节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a24 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elslast;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a25;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a15;;
                     *);;
//删除当前结构的节点，和对应的变量结构
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a25 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elemsub;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a26;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a26 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elemsubcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a27m;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//重复节点检测并消除
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a27m (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_assign: rrel_const: rrel_norole_relation: rrel_scp_var: _els2a1;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elslast;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a27m1;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a27;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a27m1 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_assign: rrel_const: rrel_norole_relation: rrel_scp_var: _els2a2;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a27m2;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a27;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a27m2 (* 
                  <- ifCoin;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _els2a1;;
                  -> rrel_2: rrel_fixed: rrel_scp_var: _els2a2;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a27m3;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a27;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a27m3 (* 
                  <- searchSetStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _elsnext;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                  -> rrel_set_3: rrel_assign: rrel_scp_var: _esaallsub;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a27m4;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a27m4 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _esaallsub;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_scp_var: _elem2a;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a27m5;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a27m7;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a27m5 (* 
                  <- eraseEl;;
                  -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a27m6;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a27m6 (* 
                  <- genElStr5;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _elslast;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elem2a;;
                  -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a27m4;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a27m7 (* 
                  <- eraseEl;;
                  -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elsnext;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a15;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a27 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elslast;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator3_a15;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//开始进行量词前移操作
//首先删除等价节点和他的下一个节点之间的弧
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_1 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_2;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//先随机找出一个存在量词
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4(* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemtuex;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elem;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_2 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_3;;
                     *);;
//找出当前节点的上一节点和下一节点,并删除对应的弧
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_3 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _elemsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_4;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_4 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemcp;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: rrel_bind_variables;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_5;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_5 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_6;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_6 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_7;;
                     *);;
//找出下一个节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_7 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elsnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_8;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_8 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_9;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_9 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_10;;
                     *);;
//找出上一个节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_10 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elslast;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elem;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_11;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_11 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_12;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//开始将当前存在量词前移
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_12 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemnext;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elem;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_13;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_13 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemnextcp;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_14m;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//重复节点检测并消除
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_14m (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_assign: rrel_const: rrel_norole_relation: rrel_scp_var: _els2a1;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elslast;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_14m1;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_14;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_14m1 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_assign: rrel_const: rrel_norole_relation: rrel_scp_var: _els2a2;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_14m2;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_14;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_14m2 (* 
                  <- ifCoin;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _els2a1;;
                  -> rrel_2: rrel_fixed: rrel_scp_var: _els2a2;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_14m3;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_14;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_14m3 (* 
                  <- searchSetStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _elsnext;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                  -> rrel_set_3: rrel_assign: rrel_scp_var: _esaallsub;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_14m4;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_14m4 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _esaallsub;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_scp_var: _elem2a;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_14m5;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_14m7;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_14m5 (* 
                  <- eraseEl;;
                  -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_14m6;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_14m6 (* 
                  <- genElStr5;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _elslast;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elem2a;;
                  -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_14m4;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_14m7 (* 
                  <- eraseEl;;
                  -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elsnext;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_15;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_14 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elslast;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_15;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//开始循环前移剩余的存在量词
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_15 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemtuex;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_16;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_16 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_17;;
                     *);;
//先将这个存在结构中的变量赋值给已经前移的结构中
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_17 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemsubcp;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: rrel_bind_variables;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_18;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_15;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_18 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsubcp;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_var: rrel_node: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_fixed: rrel_scp_var: _elemcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_19;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_15;;
                     *);;
//找出当前节点的上一个节点和下一个节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_19 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _els1;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_20;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_15;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_20 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _els1;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemsubcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_21;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_15;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_21 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_22;;
                     *);;
//找出下一个节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_22 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _els1;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elsnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_23;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_15;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_23 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_24;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_15;;
                     *);;
//找出上一个节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_24 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elslast;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_25;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_15;;
                     *);;
//删除当前结构的节点，和对应的变量结构
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_25 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elemsub;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_26;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_26 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elemsubcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_27m;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//重复节点检测并消除
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_27m (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_assign: rrel_const: rrel_norole_relation: rrel_scp_var: _els2a1;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elslast;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_27m1;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_27;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_27m1 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_assign: rrel_const: rrel_norole_relation: rrel_scp_var: _els2a2;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_27m2;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_27;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_27m2 (* 
                  <- ifCoin;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _els2a1;;
                  -> rrel_2: rrel_fixed: rrel_scp_var: _els2a2;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_27m3;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_27;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_27m3 (* 
                  <- searchSetStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _elsnext;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                  -> rrel_set_3: rrel_assign: rrel_scp_var: _esaallsub;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_27m4;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_27m4 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _esaallsub;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_scp_var: _elem2a;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_27m5;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_27m7;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_27m5 (* 
                  <- eraseEl;;
                  -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_27m6;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_27m6 (* 
                  <- genElStr5;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _elslast;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elem2a;;
                  -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_27m4;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_27m7 (* 
                  <- eraseEl;;
                  -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elsnext;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_15;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator4_27 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elslast;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator4_15;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//开始任意量词提前
//首先判断存在任意量词吗
//先随机找出一个存在量词
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemtuge;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elem;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_1 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_2;;
                     *);;
//找出当前节点的上一节点和下一节点,并删除对应的弧
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_2 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _elemsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_3;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_3 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemcp;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: rrel_bind_variables;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_4;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_4 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_5;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_5 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_6;;
                     *);;
//找出下一个节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_6 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elsnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_7;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_7 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_8;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_8 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_9;;
                     *);;
//找出上一个节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_9 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elslast;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elem;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_11;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_11 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_12;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//开始将当前存在量词前移
//首先判断等价节点下面存在存在量词吗(只需要判断原始的存在节点和下一个节点之间存在弧吗)
//能找到说明该结构中不存在存在量词
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_12 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemnext;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemnextcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_13;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_17;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//开始对不存在存在量词的结构进行量词前移
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_13 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_14;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_14 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemnext;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elem;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_15;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_15 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemnextcp;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_16m;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//重复节点检测并消除
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_16m (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_assign: rrel_const: rrel_norole_relation: rrel_scp_var: _els2a1;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elslast;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_16m1;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_16;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_16m1 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_assign: rrel_const: rrel_norole_relation: rrel_scp_var: _els2a2;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_16m2;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_16;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_16m2 (* 
                  <- ifCoin;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _els2a1;;
                  -> rrel_2: rrel_fixed: rrel_scp_var: _els2a2;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_16m3;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_16;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_16m3 (* 
                  <- searchSetStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _elsnext;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                  -> rrel_set_3: rrel_assign: rrel_scp_var: _esaallsub;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_16m4;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_16m4 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _esaallsub;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_scp_var: _elem2a;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_16m5;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_16m7;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_16m5 (* 
                  <- eraseEl;;
                  -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_16m6;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_16m6 (* 
                  <- genElStr5;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _elslast;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elem2a;;
                  -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_16m4;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_16m7 (* 
                  <- eraseEl;;
                  -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elsnext;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_21;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_16 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elslast;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_21;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_17 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemnext;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elemnextsu;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_18;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_18 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemnextsu;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemnextcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_19;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_19 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_20;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_20 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemnextsu;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elem;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_15;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//开始循环前移剩余的任意量词
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_21 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemtuge;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_22;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_22 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_23;;
                     *);;
//先将这个存在结构中的变量赋值给已经前移的结构中
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_23 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemsubcp;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: rrel_bind_variables;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_24;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_21;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_24 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsubcp;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_var: rrel_node: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_fixed: rrel_scp_var: _elemcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_25;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_21;;
                     *);;
//找出当前节点的上一个节点和下一个节点

           -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_25 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _els1;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_26;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_21;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_26 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _els1;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemsubcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_27;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_21;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_27 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_28;;
                     *);;
//找出下一个节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_28 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _els1;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elsnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_29;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_21;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_29 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_30;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_21;;
                     *);;
//找出上一个节点
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_30 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elslast;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_31;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_21;;
                     *);;
//删除当前结构的节点，和对应的变量结构
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_31 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elemsub;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_32;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_32 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elemsubcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_33m;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//重复节点检测并消除
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_33m (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_assign: rrel_const: rrel_norole_relation: rrel_scp_var: _els2a1;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elslast;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_33m1;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_33;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_33m1 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_assign: rrel_const: rrel_norole_relation: rrel_scp_var: _els2a2;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_33m2;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_33;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_33m2 (* 
                  <- ifCoin;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _els2a1;;
                  -> rrel_2: rrel_fixed: rrel_scp_var: _els2a2;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_33m3;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_33;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_33m3 (* 
                  <- searchSetStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _elsnext;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                  -> rrel_set_3: rrel_assign: rrel_scp_var: _esaallsub;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_33m4;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_33m4 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _esaallsub;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_scp_var: _elem2a;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_33m5;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_33m7;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_33m5 (* 
                  <- eraseEl;;
                  -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_33m6;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_33m6 (* 
                  <- genElStr5;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _elslast;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elem2a;;
                  -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_33m4;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_33m7 (* 
                  <- eraseEl;;
                  -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elsnext;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_21;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator5_33 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elslast;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elsnext;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator5_21;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator_return (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elemtuge;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return1;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator_return1 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elemtuex;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_qua_for_operator_return2;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_qua_for_operator_return2 (* 
                     <- return;;
                     *);;                                                 
      *);;  
*);;
