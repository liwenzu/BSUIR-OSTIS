scp_program -> proc_jud_of_lo_equivalence_formula_rena (* 
   -> rrel_params: .proc_jud_of_lo_equivalence_formula_rena_params (*  
		-> rrel_1: rrel_in: _elems_1cp;;
		-> rrel_2: rrel_in: _firsttup;;         
            *);;
   -> rrel_operators: .proc_jud_of_lo_equivalence_formula_rena_set (*
            -> rrel_init: .proc_jud_of_lo_equivalence_formula_rena_operator0 (* 
                     <- printNl;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: [谓词逻辑公式中的换名函数];;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_rena_operator0_1;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_rena_operator0_1 (* 
                     <- genEl;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _classgeex;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_rena_operator0_2;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_rena_operator0_2 (* 
                     <- genEl;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _classvar;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_rena_operator0_3;;
                     *);;
//需要替换的结构和需要替换的元素
            -> .proc_jud_of_lo_equivalence_formula_rena_operator0_3 (* 
                     <- genEl;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _chaele;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_rena_operator0_4;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_rena_operator0_4 (* 
                     <- genEl;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _chastr;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_rena_operator1;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//首先找出所有存在和任意量词判断他们中是否包含相同的变量
 //首先找到当前结构中包含的所有子结构
           -> .proc_jud_of_lo_equivalence_formula_rena_operator1 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elems_1cp;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_struct: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _esaall;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_rena_operator1_1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_rena_operator_return;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
           -> .proc_jud_of_lo_equivalence_formula_rena_operator1_1 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _esaall;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_struct: rrel_scp_var: _elem;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_rena_operator1_2;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_rena_operator1_6;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_rena_operator1_2 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_rena_operator1_3;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_rena_operator1_3 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _arc;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elem;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: rrel_bind_variables;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_rena_operator1_4;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_rena_operator1_1;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_rena_operator1_4 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _firsttup;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elem;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: rrel_bind_variables;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_rena_operator1_1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_rena_operator1_5;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_rena_operator1_5 (* 
                     <- genElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _classgeex;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elem;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_rena_operator1_1;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
           -> .proc_jud_of_lo_equivalence_formula_rena_operator1_6 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _classgeex;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elem;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_rena_operator1_7;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_rena_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_rena_operator1_7 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_rena_operator1_8;;
                     *);;
//判断有几个量词，如果一个不需要换名
           -> .proc_jud_of_lo_equivalence_formula_rena_operator1_8 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _classgeex;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_rena_operator1_9;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_rena_operator_return;;
                     *);;
//将第一个结构的变量加入到节点中
           -> .proc_jud_of_lo_equivalence_formula_rena_operator1_9 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_var: rrel_node: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_fixed: rrel_scp_var: _classvar;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_rena_operator1_10;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_rena_operator1_10;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
           -> .proc_jud_of_lo_equivalence_formula_rena_operator1_10 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _classgeex;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_rena_operator1_11;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_rena_operator1_20;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_rena_operator1_11 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_rena_operator1_12;;
                     *);;
           -> .proc_jud_of_lo_equivalence_formula_rena_operator1_12 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemcp;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_var: rrel_node: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _esaallsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_rena_operator1_13;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_rena_operator1_10;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
           -> .proc_jud_of_lo_equivalence_formula_rena_operator1_13 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _esaallsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _els1;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_rena_operator1_14;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_rena_operator1_10;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_rena_operator1_14 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_rena_operator1_15;;
                     *);;
//判断当前变量存在在节点中吗
           -> .proc_jud_of_lo_equivalence_formula_rena_operator1_15 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _classvar;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _els1;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_rena_operator1_16;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_rena_operator1_19;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_rena_operator1_16 (* 
                     <- genElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _chaele;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _els1;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_rena_operator1_17;;
                     *);;
//判断当前结构已经包含到需要替换的节点中吗
           -> .proc_jud_of_lo_equivalence_formula_rena_operator1_17 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _chastr;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_rena_operator1_13;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_rena_operator1_18;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_rena_operator1_18 (* 
                     <- genElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _chastr;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_rena_operator1_13;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_rena_operator1_19 (* 
                     <- genElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _classvar;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _els1;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_rena_operator1_13;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//判断当前结构中是否需要进行替换(即判断是否有替换元素)
           -> .proc_jud_of_lo_equivalence_formula_rena_operator1_20 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _chaele;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_rena_operator2;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_rena_operator_return;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//开始进行换名







            -> .proc_jud_of_lo_equivalence_formula_rena_operator2 (* 
                     <- printEl;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _classvar;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_rena_operator20;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_rena_operator20 (* 
                     <- printEl;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _chaele;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_rena_operator30;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_rena_operator30 (* 
                     <- printEl;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _chastr;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_rena_operator_return;;
                     *);;














//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_rena_operator_return (* 
                     <- return;;
                     *);;                                                 
      *);;  
*);;
