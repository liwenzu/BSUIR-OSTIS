scp_program -> proc_jud_of_lo_equivalence_formula_na_neg (* 
   -> rrel_params: .proc_jud_of_lo_equivalence_formula_na_neg_params (*  
		-> rrel_1: rrel_in: _elems_1cp;;
            *);;
   -> rrel_operators: .proc_jud_of_lo_equivalence_formula_na_neg_set (*
            -> rrel_init: .proc_jud_of_lo_equivalence_formula_na_neg_operator0 (* 
                     <- printNl;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: [缩小否定词作用范围的函数];;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator0_1;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator0_1 (* 
                     <- genEl;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _classpoint;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator0_2;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator0_2 (* 
                     <- genEl;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _classpointsub;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator1;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//首先找到每个结构中的第一个链接节点
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator1 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _esaall;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator_return;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator1_1 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _esaall;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _firsttup;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_2;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator1_2 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_3;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator1_3 (* 
                     <- ifType;;
                     -> rrel_1: rrel_const: rrel_access: rrel_scp_var: _firsttup;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_4;;
                     *);;
//开始判断是第一连接节点
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator1_4 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _arc;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _firsttup;; 
                    => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_5;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//开始后续处理
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator1_5 (* 
                     <- varAssign;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _elemmed;;
                     -> rrel_2: rrel_fixed: rrel_scp_var: _firsttup;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_5a;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator1_5a (* 
                     <- varAssign;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _elemro;;
                     -> rrel_2: rrel_fixed: rrel_scp_const: rrel_1;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_6a;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator1_6a (* 
                     <- printEl;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmed;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_6;;
                     *);;
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator1_6 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmed;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _elstup;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator2;;//@@@@1_7
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_12;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//判断该节点是否定吗
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator2 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: negation;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemmed;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_7;;
                     *);;
//判断第一个否定节点在2叉树中的位置(确定是否还有其他否定分支，即是否具有等价的第一个否定节点)
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator2_1 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _classpoint;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator8;;//@@(留有接口，说明第一个否定处于不同分支中)
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_2;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//把当前节点当做新分支的根节点，再次扫描剩余的链接节点
//开始后续处理
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator2_2 (* 
                     <- varAssign;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _elemmedsub;;
                     -> rrel_2: rrel_fixed: rrel_scp_var: _elemmed;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_3;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator2_3 (* 
                     <- varAssign;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _elemrosub;;
                     -> rrel_2: rrel_fixed: rrel_scp_const: rrel_1;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_4a;;
                     *);;
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator2_4a (* 
                     <- printEl;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmedsub;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_5;;
                     *);;
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator2_5 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmedsub;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _elstupsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_6;;//3
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_12;;//@@@@@@@@@@@@
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator2_6 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elstupsub;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elemmednext;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_7;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator_return;;//@@@@@@@@@@@@@
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator2_7 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator3;;//2_8
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//开始判断各个节点并且对其进行否定
//判断是否定节点吗
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: negation;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemmedsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_1;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_4;;//判断是其他点吗4
                     *);;
//找这个否定点的上一个点
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_1 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elemmedlast;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemmedsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_2;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator_return;;//@@@判断是其他点吗
                     *);;
//删除当前这个节点
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_2 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elemmedsub;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_3;;
                     *);;
//上一个节点和下一个节点之间生成弧
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_3 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmedlast;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemmednext;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_8;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//判断是存在节点吗
          -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_4 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: nrel_existence;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemmedsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_5;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_9;;
                     *);;
//删除弧
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_5 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_6;;
                     *);;
//生成任意量词和当前节点之间的弧
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_6 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: nrel_generality;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemmedsub;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_7;;
                     *);;
//判断当前结构中包含任意变量吗
          -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_7 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elems_1cp;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_const: nrel_generality;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_8;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_8;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_8 (* 
                     <- genElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elems_1cp;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_const: nrel_generality;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_8;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//判断是合取节点吗
          -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_9 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: nrel_conjunction;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemmedsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_10;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator4;;
                     *);;
//删除弧
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_10 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_11;;
                     *);;
//生成任析取和当前节点之间的弧
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_11 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: nrel_disjunction;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemmedsub;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_12;;
                     *);;
//判断当前结构中包含析取节点吗
          -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_12 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elems_1cp;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_const: nrel_disjunction;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_14;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_13;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_13 (* 
                     <- genElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elems_1cp;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_const: nrel_disjunction;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_14;;
                     *);;
//判断有相连的结构吗
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_14 (* 
                     <- searchSetStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmedsub;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_struct: rrel_scp_var: _arc;;
                     -> rrel_set_3: rrel_assign: rrel_scp_var: _esaallstr;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_15;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_8;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_15 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _esaallstr;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_struct: rrel_scp_var: _elem;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_16;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_8;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_16 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_17;;
                     *);;
//删除一个链接
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_17 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmedsub;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elem;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_18;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_15;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_18 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_19;;
                     *);;
//生成一个链接
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_19 (* 
                     <- genElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elems_1cp;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elemcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_20;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_20 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmedsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemcp;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_21;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_21 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemcp;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elem;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_22;;
                     *);;
//判断当前结构中有否定元素吗
          -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_22 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elems_1cp;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_const: negation;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_24;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_23;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_23 (* 
                     <- genElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elems_1cp;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_const: negation;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_24;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_24 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: negation;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemcp;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_15;;
                     *);;








            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator3_25 (* 
                     <- printEl;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator3_15;;
//                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator_return;;
                     *);;







//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&












//判断elstup还有弧吗
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator2_8 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elstupsub;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _arc;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_9;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_9a;;
                     *);;

            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator2_9a (* 
                     <- varAssign;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _elemmedsub;;
                     -> rrel_2: rrel_fixed: rrel_scp_var: _elemmednext;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_4a;;
                     *);;




            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator2_9 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _classpointsub;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elstupsub;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elemrosub;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_10;;
                     *);;
          -> .proc_jud_of_lo_equivalence_formula_na_neg_operator2_10 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemrosub;;
                     -> rrel_2: rrel_assign: rrel_const: rrel_common: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _currelem;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: nrel_basic_sequence;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_11;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator_return;;//@@@@说明编号不够用
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator2_11 (* 
                     <- varAssign;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _elemrosub;;
                     -> rrel_2: rrel_fixed: rrel_scp_var: _currelem;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_4a;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//先把编号减一
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator2_12 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _currlastsub;;
                     -> rrel_2: rrel_assign: rrel_const: rrel_common: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemrosub;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: nrel_basic_sequence;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_13;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator_return;;//@@@@说明编号不够用
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator2_13 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _classpointsub;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemmedcpsub;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _currlastsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_14;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator22;;//@@@@@@@@@@@@
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator2_14 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmedcpsub;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemmedsub;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_15;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator2_15 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elemmedcpsub;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_16;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator2_16 (* 
                     <- varAssign;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _elemrosub;;
                     -> rrel_2: rrel_fixed: rrel_scp_var: _currlastsub;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator2_4a;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&













            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator22 (* 
                     <- printNl;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: [否定节点@@@@@@@@@@@@@@@];;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator_return;;
                     *);;





//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator1_7 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elstup;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _elemmed;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_8;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator1_8 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_9a;;
                     *);;
//判断elstup还有弧吗
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator1_9a (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elstup;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_const: rrel_not_binary_tuple: rrel_scp_var: _arc;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_9;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_6a;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator1_9 (* 
                     <- genElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _classpoint;;  
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elstup;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _elemro;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_10;;
                     *);;

            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator1_10 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemro;;
                     -> rrel_2: rrel_assign: rrel_const: rrel_common: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _currelem;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: nrel_basic_sequence;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_11;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator_return;;//@@@@说明编号不够用
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator1_11 (* 
                     <- varAssign;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _elemro;;
                     -> rrel_2: rrel_fixed: rrel_scp_var: _currelem;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_6a;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//先把编号减一
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator1_12 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _currlast;;
                     -> rrel_2: rrel_assign: rrel_const: rrel_common: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_fixed: rrel_scp_var: _elemro;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: nrel_basic_sequence;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_13;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator_return;;//@@@@说明编号不够用
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator1_13 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _classpoint;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemmedcp;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_var: _currlast;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_14;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator116;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator1_14 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemmedcp;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemmed;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_15;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator1_15 (* 
                     <- eraseEl;;
                     -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _elemmedcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_16;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator1_16 (* 
                     <- varAssign;;
                     -> rrel_1: rrel_assign: rrel_scp_var: _elemro;;
                     -> rrel_2: rrel_fixed: rrel_scp_var: _currlast;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator1_6a;;
                     *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator116 (* 
                     <- printNl;;
                     -> rrel_1: rrel_fixed: rrel_scp_const: [程序调试断点！！！！！！！！！！！！！];;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator_return;;
                     *);;













/*
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator17 (* 
                     <- printEl;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _classpoint;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator18;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator18 (* 
                     <- searchElStr5;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _classpoint;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elem;;
                     -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_5: rrel_fixed: rrel_scp_const: rrel_1;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator19;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator_return;;
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator19 (* 
                     <- searchElStr3;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elem;;
                     -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                     -> rrel_3: rrel_assign: rrel_scp_var: _elemcp;;
                     => nrel_then: .proc_jud_of_lo_equivalence_formula_na_neg_operator20;;
                     => nrel_else: .proc_jud_of_lo_equivalence_formula_na_neg_operator_return;;//@@@@@@@@@@@@@
                     *);;
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator20 (* 
                     <- printEl;;
                     -> rrel_1: rrel_fixed: rrel_scp_var: _elemcp;;
                     => nrel_goto: .proc_jud_of_lo_equivalence_formula_na_neg_operator_return;;
                     *);;
*/


















//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_na_neg_operator_return (* 
                     <- return;;
                     *);;                                                 
      *);;  
*);;
