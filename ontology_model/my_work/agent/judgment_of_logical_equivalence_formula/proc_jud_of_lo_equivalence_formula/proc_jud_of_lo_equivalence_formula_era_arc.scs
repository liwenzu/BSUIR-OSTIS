scp_program -> proc_jud_of_lo_equivalence_formula_era_arc (* 
   -> rrel_params: .proc_jud_of_lo_equivalence_formula_era_arc_params (*  
      -> rrel_1: rrel_in: _elems_1cp;;
      *);;
   -> rrel_operators: .proc_jud_of_lo_equivalence_formula_era_arc_set (*
      -> rrel_init: .proc_jud_of_lo_equivalence_formula_era_arc_operator0 (* 
            <- printNl;;
            -> rrel_1: rrel_fixed: rrel_scp_const: [消去当前结构中潜在的重复弧];;
            => nrel_goto: .proc_jud_of_lo_equivalence_formula_era_arc_operator1;;
            *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//找出所有的关系
            -> .proc_jud_of_lo_equivalence_formula_era_arc_operator1 (* 
                  <- searchSetStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _elems_1cp;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_set_3: rrel_assign: rrel_scp_var: _esaall;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_era_arc_operator1_1;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_era_arc_operator_return;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_era_arc_operator1_1 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _esaall;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_scp_var: _elem;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_era_arc_operator1_2;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_era_arc_operator_return;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_era_arc_operator1_2 (* 
                  <- eraseEl;;
                  -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_era_arc_operator1_3;;
                  *);;  
            -> .proc_jud_of_lo_equivalence_formula_era_arc_operator1_3 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_assign: rrel_not_binary_tuple: rrel_scp_var: _els1;;  
                  -> rrel_2: rrel_fixed: rrel_scp_var: _elem;;
                  -> rrel_3: rrel_assign: rrel_not_binary_tuple: rrel_scp_var: _els2;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_era_arc_operator1_4;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_era_arc_operator1_1;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_era_arc_operator1_4 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_assign: rrel_const: rrel_norole_relation: rrel_scp_var: _els12;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _els1;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_era_arc_operator1_5;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_era_arc_operator1_1;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_era_arc_operator1_5 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_assign: rrel_const: rrel_norole_relation: rrel_scp_var: _els22;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _els2;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_era_arc_operator1_6;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_era_arc_operator1_1;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_era_arc_operator1_6 (* 
                  <- ifCoin;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _els12;; 
                  -> rrel_2: rrel_fixed: rrel_scp_var: _els22;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_era_arc_operator1_7;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_era_arc_operator1_1;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_era_arc_operator1_7 (* 
                  <- searchSetStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _els2;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_scp_var: _arc;;
                  -> rrel_set_3: rrel_assign: rrel_scp_var: _esaallsub;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_era_arc_operator1_8;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_era_arc_operator1_1;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_era_arc_operator1_8 (* 
                  <- searchElStr3;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _esaallsub;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_assign: rrel_scp_var: _elem;;
                  => nrel_then: .proc_jud_of_lo_equivalence_formula_era_arc_operator1_9;;
                  => nrel_else: .proc_jud_of_lo_equivalence_formula_era_arc_operator1_11;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_era_arc_operator1_9 (* 
                  <- eraseEl;;
                  -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_era_arc_operator1_10;;
                  *);; 
            -> .proc_jud_of_lo_equivalence_formula_era_arc_operator1_10 (* 
                  <- genElStr5;;
                  -> rrel_1: rrel_fixed: rrel_scp_var: _els1;;  
                  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_3: rrel_fixed: rrel_scp_var: _elem;;
                  -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
                  -> rrel_5: rrel_fixed: rrel_scp_var: _elems_1cp;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_era_arc_operator1_8;;
                  *);;
            -> .proc_jud_of_lo_equivalence_formula_era_arc_operator1_11 (* 
                  <- eraseEl;;
                  -> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _els2;;
                  => nrel_goto: .proc_jud_of_lo_equivalence_formula_era_arc_operator_return;;
                  *);;
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
            -> .proc_jud_of_lo_equivalence_formula_era_arc_operator_return (* 
                  <- return;;
                  *);;                                                 
      *);;  
*);;
