sc_node_norole_relation->nrel_strongly_connected_component;;

nrel_strongly_connected_component=>nrel_main_idtf:[компонента сильной связности*](*<-lang_ru;;*);;
nrel_strongly_connected_component=>nrel_idtf:[strongly connected component*](*<-lang_en;;*);;

nrel_strongly_connected_component => nrel_arity_of_relations: 2	(* <- number ;;*);;
nrel_strongly_connected_component <- binary_relation;;

nrel_strongly_connected_component <- reflexive_relation;;
nrel_strongly_connected_component <- antisymmetric_relation;; 
nrel_strongly_connected_component <- antitransitive_relation;;

nrel_strongly_connected_component => nrel_definitional_domain: concept_directed_graph;;
nrel_strongly_connected_component => nrel_first_domain: concept_directed_graph;;
nrel_strongly_connected_component => nrel_second_domain: concept_directed_graph;; 

nrel_strongly_connected_component <- rrel_key_sc_element: 
     ... 
	(*
	<= nrel_using_constants:
				{
					concept_directed_graph;
					nrel_subgraph
				};;
	=> nrel_main_idtf: [Определение: компонента сильной связности] (* <- lang_ru;; *);;
	=> nrel_main_idtf: [Definition: strongly connected component] (* <- lang_en;; *);;
	<- definition;;
	<= nrel_sc_text_translation: ...
		(*
		-> rrel_example: 
			[Компонентами сильной связности ориентированного графа G называются его максимальные по включению сильно связные подграфы.]	(* <- lang_ru;; *);;
		-> rrel_example: 
			[The strongly connected components of an arbitrary directed graph G form a partition into subgraphs that are themselves strongly connected.](*<- lang_en;;*);;
		*);;
	<= nrel_bibliographical_source: emelichev_melnikov_lekcii_po_tg;;
	*);;
				
nrel_strongly_connected_component<- rrel_main_key_sc_element:
		...
		(*
		=> nrel_main_idtf: [Утверждение: наиболее быстрые алгоритмы для поиска компонент сильной связности] (* <- lang_ru;; *);;
		=> nrel_main_idtf: [Statement: the fastest algorithms to detect strongly connected components] (* <- lang_en;; *);;
		<- statement;;
		<= nrel_sc_text_translation: ...
			(*
			-> rrel_example: 
				[Наиболее быстрыми алгоритмами для поиска компонент сильной связности являются алгоритмы Косарайю, Габова и Тарьяна.](*<- lang_ru;;*);;
			-> rrel_example: 
				[The fastest algorithms to detect strongly connected components are: Kosaraju's algorithm, Tarjan's strongly connected components algorithm and The path-based strong component algorithm.](*<- lang_en;;*);;
			*);;
		<= nrel_bibliographical_source: R_Distel_Graph_Theory;;
		*);;				
	
nrel_strongly_connected_component <- rrel_key_sc_element: 
	...
	(*
		<- illustration;;
		<= nrel_sc_text_translation:
		...
			(*
			-> rrel_example:
				"file://contents/strongly_connected_component.png";;
			*);;
	*);;
